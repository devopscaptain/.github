name: Create Team

on:
  pull_request:
    types: [closed]
    paths:
      - 'team-name.txt'

jobs:
  create_team:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Team Details
        id: extract
        run: |
          # Ensure team-name.txt exists
          if [ ! -f team-name.txt ]; then
            echo "::error::team-name.txt not found!"
            exit 1
          fi
          
          # Read and clean team name
          TEAM_NAME=$(cat team-name.txt | sed 's/[`]//g' | xargs)
          
          # Validate team name format
          if [[ ! "$TEAM_NAME" =~ ^TEAM-[a-zA-Z0-9_-]+$ ]]; then
            echo "::error::Invalid team name format: '$TEAM_NAME'"
            exit 1
          fi
          
          # Extract details from PR body (removing markdown formatting)
          PR_BODY=$(echo '${{ github.event.pull_request.body }}' | sed 's/[`]//g')
          
          PRIVACY=$(echo "$PR_BODY" | grep -A1 "Visibility:" | tail -1 | xargs | tr '[:upper:]' '[:lower:]')
          DESCRIPTION=$(echo "$PR_BODY" | grep -A1 "Purpose:" | tail -1 | xargs)
          MAINTAINERS=$(echo "$PR_BODY" | grep -A1 "Maintainers:" | tail -1 | sed 's/none//' | xargs | sed 's/^,*//;s/,*$//')
          
          # Set outputs
          echo "TEAM_NAME=$TEAM_NAME" >> $GITHUB_ENV
          echo "PRIVACY=${PRIVACY:-secret}" >> $GITHUB_ENV
          echo "DESCRIPTION=${DESCRIPTION:-Team created via automation}" >> $GITHUB_ENV
          echo "MAINTAINERS=${MAINTAINERS:-none}" >> $GITHUB_ENV
          
          echo "Extracted values:"
          echo "Team: $TEAM_NAME"
          echo "Privacy: $PRIVACY"
          echo "Description: $DESCRIPTION"
          echo "Maintainers: $MAINTAINERS"

      - name: Create GitHub Team
        uses: actions/github-script@v6
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            try {
              const teamSlug = process.env.TEAM_NAME.toLowerCase().replace(/[^a-z0-9-]/g, '-');
              const { data: team } = await github.rest.teams.create({
                org: context.repo.owner,
                name: process.env.TEAM_NAME,
                slug: teamSlug,
                description: process.env.DESCRIPTION,
                privacy: process.env.PRIVACY,
              });
              
              if (process.env.MAINTAINERS && process.env.MAINTAINERS !== 'none') {
                const maintainers = process.env.MAINTAINERS.split(',').map(m => m.trim()).filter(m => m);
                for (const user of maintainers) {
                  try {
                    await github.rest.teams.addOrUpdateMembershipForUserInOrg({
                      org: context.repo.owner,
                      team_slug: team.slug,
                      username: user,
                      role: 'maintainer'
                    });
                  } catch (error) {
                    core.warning(`Failed to add ${user} as maintainer: ${error.message}`);
                  }
                }
              }
              
              await github.rest.issues.createComment({
                issue_number: ${{ github.event.pull_request.number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `✅ Team **${team.name}** created!\n\n` +
                      `- **Visibility**: ${process.env.PRIVACY}\n` +
                      `- **Description**: ${process.env.DESCRIPTION}\n` +
                      (process.env.MAINTAINERS !== 'none' ? 
                       `- **Maintainers**: ${process.env.MAINTAINERS.replace(/,/g, ', ')}` : '')
              });
            } catch (error) {
              core.setFailed(`Team creation failed: ${error}`);
              await github.rest.issues.createComment({
                issue_number: ${{ github.event.pull_request.number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ Failed to create team: ${error.message}`
              });
            }
